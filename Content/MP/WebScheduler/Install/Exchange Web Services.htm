<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us" style="mc-master-page: url('..\..\..\Resources\MasterPages\MeetingPlanner.flmsp');" MadCap:lastBlockDepth="4" MadCap:lastHeight="3642" MadCap:lastWidth="741">
    <head><title></title>
        <link href="../../../Resources/Stylesheets/MainStyles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h1 class="Heading1" MadCap:autonum="CHAPTER&#160;1: ">Exchange Web Services</h1>
        <h2>Introduction</h2>
        <p>This section covers MeetingPlanner’s use of EWS and impersonation.  For additional, up-to-date information, please see the references below that include relevant Microsoft knowledge articles for each topic.</p>
        <h2>Exchange Web Services (EWS)</h2>
        <p>There are two ways for third-parties to interact with Exchange: MAPI and Exchange Web Services (EWS).  This document will cover the latter, which is the primary avenue for MeetingPlanner to interact with Exchange from the application server.</p>
        <p>While developers are given the ability to interact directly with EWS, MeetingPlanner uses Microsoft’s own EWS Managed API, which is Microsoft’s recommended interface for interacting with EWS.</p>
        <h2>Impersonation</h2>
        <p>Exchange provides two methods to provide permissions within Exchange, allowing one account to interact with multiple mailboxes: Delegate and Impersonation.  Generally speaking, delegate permissions are provided to users, giving them access to a few other users’ mailboxes, while impersonation is provided to a service account in order to provide access to a large number of users’ mailboxes.  With the exception of select functions used in MeetingPlanner digital signage, all EWS interaction requires impersonation permissions.</p>
        <p>Impersonation ultimately provides “Send as” permissions, which means that the account is able to interact with Exchange as though they are the other user account.  For example, a service account would be able to “impersonate” Joe User’s account in order to interact with his calendar.  An invitation could be sent to other users, and those users would see the invitation as though it came directly from Joe User.  This is in direct contrast to delegate permissions, which, in the same scenario, would result in the invited users receiving an invitation from the service account with a note that the account was acting on behalf of Joe User.</p>
        <p>It is also important to note that impersonation is something that can only be enacted through code.  If a profile was made for the service account in Outlook, no permissions would be able to be enacted as impersonation has no effect in Outlook.  This adds another layer of safety, and supports Microsoft’s design intentions of providing impersonation for exclusive use by service accounts.</p>
        <p>Impersonation is provided by granting the ApplicationImpersonation role to the service account.  These permissions can be limited to a management scope, if desired.  For MeetingPlanner, the service account will need permissions to all users that may interact with MeetingPlanner.</p>
        <h2>Accessing EWS</h2>
        <p>As was mentioned earlier, MeetingPlanner utilizes the Microsoft Managed API library. The library is responsible for sending information down the wire and receiving the response.  This allows all information to be sent securely, via Microsoft’s own best practices.</p>
        <p>Based on the standard setup, which requires an https EWS url, all communications occur via an SSL.  MeetingPlanner will also validate the SSL certificate prior to creating a connection.  (As may be required in certain test environments, there is an option to disable this SSL check:  Suite &gt; Menu &gt; Integrations &gt; EWS &gt; Ignore SSL Errors).</p>
        <h2>MeetingPlanner Applications Requiring EWS</h2>
        <p>The applications that make use of an EWS connection are displayed below, along with the specific functions that require the connection.</p>
        <p>EWS is required to display user availability in the Web Scheduler.  The current user is impersonated and attendee availability will be displayed based on that user’s level of permissions to the other users’ calendars.  This is an optional function, which means that the Web Scheduler will continue to work without an EWS connection (this function simply wouldn’t work).</p>
        <p>EWS is required for the Appointment Notifier service to run successfully.  This service is responsible for relaying actions taken in the Web Scheduler to the user’s Exchange calendar.</p>
        <p>EWS is required for MeetingPlanner digital signage, if Exchange is the desired backend connection.  For full functionality, delegate “Read” access to all resource mailboxes is also required.</p>
        <h3>References </h3>
        <ul>
            <li>https://msdn.microsoft.com/en-us/lib...xchg.150).aspx</li>
            <li>https://msdn.microsoft.com/en-us/lib...xchg.150).aspx.</li>
            <li>https://msdn.microsoft.com/en-us/lib...xchg.150).aspx</li>
            <li>https://msdn.microsoft.com/en-us/lib...chg.80%29.aspx</li>
        </ul>
    </body>
</html>